
# JPA 쿼리로그 출력을 위함
spring.jpa.show-sql=true

# 출력되는 쿼리 로그를 MySQL 버전으로 변경하기 위함. 하지 않으면 H2 쿼리 문접이 적용되어 나옴

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# 로컬 환경에서 H2 데이터베이스 직접 접근하려고 웹콘솔 활성화
spring.h2.console.enabled=true

# 스프링부트에서는 properties의 이름을 application-xxx.properties 로 만들면,
# xxx 라는 이름의 profile이 생성되어 이를 통해 관리 가능함.
# 호출 방식은 여러 방식이 있지만 여기서는 기본 설정 파일인 application.properties 에서 application-oauth.properties를 포함
spring.profiles.include=oauth

# 세션 저장소를 jdbc로 선택하도록 코드를 추가한다.
# 그러면, h2-console 에서 세션을 위한 테이블 2개 (SPRING_SESSION, SPRING_SESSION_ATTRIBUTES) 가 생성됨
# JPA에 의해 자동으로 생성됨.
spring.session.store-type=jdbc

#########################################################################
## src/main 과 src/test 의 환경 차이로, 각각의 환경 구성을 가짐.
## 이 때, test에 application.properties가 없으면 main의 설정을 그대로 가져옴.
## 다만, 가져오는 옵션의 범위는 application.properties 파일까이, 즉 oauth 프로퍼티 파일은 안가져옴.
## 그래서 아래와 같이 가짜 설정값을 test/resources/application.properties 에 등록한다.
#########################################################################
#
## Test OAuth
#spring.security.oauth2.client.registration.google.client-id=test
#spring.security.oauth2.client.registration.google.client-secret=test
#spring.security.oauth2.client.registration.google.scope=profile,email
