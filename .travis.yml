
language: java
jdk:
  - openjdk8

# 어느 브랜치가 푸시될 때 수행할 지 지정
branches:
  only:
    - main

# Travis CI 서버의 Home
# gradle 을 통해 의존성을 받으면 해당 디렉토리를 캐싱해서 같은 의존성은 다음 배포 때부터 다시 받지 않도록 함
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# 푸싱 되었을 때 수행하는 명령어
script: "./gradlew clean build"

# deploy 명령어가 실행되기 전에 수행됩니다.
# CodeDeploy 는 jar 파일은 인식하지 못해서, jar + 기타 설정파일들을 모아서 압축한다.
before_deploy:
  - zip -r springboot-aws-web *   # 현재 위치의 모든 파일을 해당 이름으로 압축한다. (프로젝트 이름)
  - mkdir -p deploy               # deploy 라는 디렉토리를 Travis CI 가 실행 중인 위치에서 생성한다.
  - mv springboot-aws-web.zip deploy/springboot-aws-web.zip   # 압축한 파일을 deploy/ 로 이동

# S3로 파일 업로드 혹은 CodeDeploy로 배포 등 외부 서비스와 연동될 행위들을 선언한다.
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY      # Travis repo settings 에 설정된 값
    secret_access_key: $AWS_SECRET_KEY  # Travis repo settings
    bucket: itdar-springboot-build      # S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private          # zip 파일 접근을 private 으로
    local_dir: deploy     # before_deploy 에서 생성한 디렉토리 - 해당 위치 파일들만 S3로 전송함
    wait-until-deployed: true
    on:
      all_branches: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY      # Travis repo settings 에 설정된 값
    secret_access_key: $AWS_SECRET_KEY  # Travis repo settings
    bucket: itdar-springboot-build      # S3 버킷
    key: springboot-aws-web.zip         # 빌드 파일을 압축해서 전달
    bundle_type: zip                    # 압축 확장자
    application: springboot-aws-web     # 웹 콘솔에서 등록한 CodeDeploy 애플리케이션
    deployment_group: springboot-aws-web-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      all_branches: true

# CI 실행 완료 시 메일로 알람
notifications:
  email:
    recipients:
      - thesockerrr@gmail.com

